rm(list = ls())


library(igraph)
library(Matrix)
library(irlba)
library(ggplot2)
library(data.table)
source("function.R")



######
# followers info
ID_SNs <- fread("../data/followers_Network/id_counts.csv", 
                colClasses = c("integer", "integer", "character","character","character") )
# index, followers_count, id_str, protected, screen_name
# friends info
friends_ID_SN <- fread('../data/followers_Network/friends_ID_SN_nonrandom.csv',
                       colClasses = c("integer", "integer", "character","character"))
#index, followers_count    id_str     screen_name





######
edgelist = fread("../data/followers_Network/edgelist-non-random100K.csv",
                 colClasses = c( "character","character") )
followers = unique(edgelist$followers_id_str)
friends = unique(edgelist$friends_id_str)

id1 <- match(followers, ID_SNs$id_str)
name1 <- ID_SNs$screen_name[id1]
id2 <- match(friends, friends_ID_SN$id_str)
name2 <- friends_ID_SN$screen_name[id2]
i_set = match(edgelist$followers_id_str, followers)
j_set = match(edgelist$friends_id_str, friends)

A <- sparseMatrix(i = i_set, j = j_set, dimnames = list(name1, name2))
#rownames(A) = name1; colnames(A) <- name2
# A <- A[1:10000, 1:20000]
dim(A)
#rownames(A) <- 



deg_row = rowSums(A); deg_col = colSums(A)
hist(log(1+deg_row), breaks = 100)
hist(log(1+deg_col), breaks = 100)

#id.trump = which.max(deg_col)
#A <- A[ ,-id.trump]

#idf weight
n = dim(A)[1]
idf_col <- log((n+1)/(deg_col+1))
m = dim(A)[2]
idf_row = log((m+1)/(deg_row+1))
L1 = Diagonal(n, idf_row) %*% A %*% Diagonal(m, idf_col)


## half degree




L2 = Diagonal(n, deg_row^(-0.5)) %*% A %*% Diagonal(m, deg_col^(-0.5))


## scale column + innter proeduct
L3 = A %*% Diagonal(m, idf_col)
norm1 <- rowSums(L3 *L3)
L3 =  Diagonal(n, norm1^(-0.5)) %*% L3


### scale columns with sqrt deg, and interproduct
tau2 <- mean(deg_col)
L4 = A %*% Diagonal(m, (tau2+deg_col)^(-1/2))
norm1 <- rowSums(L4 *L4)+ 1                         #mean(rowSums(L4))
L4 =  Diagonal(n, norm1^(-0.5)) %*% L4



L <- L4
svd_L <- irlba(L4, nv = 50)
# U, U1, unnormalized and normalized U

plot(svd_L$d)
k = 7 # or 7


U <- svd_L$u[,1:k]%*%Diagonal(k, svd_L$d[1:k]^(1/2))
#rowN <- unlist(apply(U, MARGIN = 1, function(x) sqrt(sum(x*x)+1e-8)))
#U1 <- Diagonal(length(rowN), rowN^(-1))%*%U
km_row = kmeans(U, k, nstart = 100, iter.max =50)


V <- svd_L$v[,1:k]
colN <- unlist(apply(V, MARGIN = 1, function(x) sqrt(sum(x*x)+1e-8)))
V1 <- Diagonal(length(colN), colN^(-1))%*%V
km_col = kmeans(V1 , k, nstart = 100, iter.max =50)


### evaluation of clusters

#2- dimension visualization:
set.seed(12)
samp1 <- sample(1:nrow(U), 4000)
plot(U[samp1,1:2], col = as.factor(km_row$cluster[samp1]))


# kmeans centers:
keyfriends <- matrix("", 20, k)
for(i in 1:k){
  c_i1 <- colMeans(L[which(km_row$cluster==i), ])
  c_i2 <- colMeans(L[which(km_row$cluster!=i), ])
  #variance stablization transformation
  c_i <- sqrt(c_i1) - sqrt(c_i2)
  names_tmp <- name2[order(-c_i)]
  c_i <- c_i[order(-c_i)]
  idx <- which(!is.na(names_tmp)) [1:20]                  
  keyfriends[,i]<-  paste0(names_tmp[idx],"-", round(c_i[idx],3))
  print(c_i['realDonaldTrump'])
}


#bloomplot:
p <- balloonplot(L, km_row$cluster, km_col$cluster)
p

#based on degree  
result <- high.deg.cluster(L, km_row$cluster, km_col$cluster)
high.deg.followers_screenN <-  result$high.deg.rows

high.deg.friends_screenN <- result$high.deg.cols

# write.csv(high.deg.followers_screenN, 
#           file = "../data/followers_Network/7_kmUV_high_deg_followers_by_cluster_nonrandom.csv")
# write.csv(high.deg.friends_screenN, 
#           file = "../data/followers_Network/7_km_UV_high_deg_friends_by_cluster_nonrandom.csv")


### inner product
unU <- svd_L$u[,1:k]  #unnomarlized U
rownames(unU) <- rownames(A)
high.innerprod.followers <- high.innerProd(unU, U1, km_row$cluster)
high.prod.followers_screenN = high.innerprod.followers

unV <- svd_L$v[,1:k]  #unnomarlized U
rownames(unV) <- colnames(A)
high.innerprod.friends <- high.innerProd(unV, V1, km_col$cluster)
inner.prod.friends_screenN <- high.innerprod.friends 

# write.csv(high.deg.followers_screenN, 
#           file = "../data/followers_Network/7_kmUV_inner_prod_followers_by_cluster_random.csv")
# write.csv(high.deg.friends_screenN, 
#           file = "../data/followers_Network/7_kmUV_inner_prod_friends_by_cluster_random.csv")



X <- rbind(U1, V1)
km_X <- kmeans(X, k, nstart = 100, iter.max = 50)


label_1 <- km_X$cluster[1:nrow(U)]
label_2 <- km_X$cluster[(nrow(U)+1):nrow(X)]


p <- balloonplot(A, label_1, label_2)


result <- high.deg.cluster(A, label_1, label_2)
high.deg.followers_screenN_X <- result$high.deg.rows
high.deg.friends_screenN_X <- result$high.deg.cols
# write.csv(high.deg.friends_screenN_X, 
#           file = "../data/followers_Network/7_kmX_high_deg_followers_by_cluster_nonrandom.csv")
# write.csv(high.deg.followers_screenN_X, 
#           file = "../data/followers_Network/7_kmX_high_deg_friends_by_cluster_nonrandom.csv")

#most aligned and highest degree nodes in each clusters
inner.prod.followers_screenN_X <- high.innerProd(unU, U, label_1)
inner.prod.friends_screenN_X <- high.innerProd(unV, V, label_2)

# write.csv(high.deg.followers_screenN_X, 
#           file = "../data/followers_Network/7_kmX_inner_prod_followers_by_cluster_nonrandom.csv")
# write.csv(high.deg.friends_screenN_X, 
#           file = "../data/followers_Network/7_kmX_inner_prod_friends_by_cluster_nonrandom.csv")


